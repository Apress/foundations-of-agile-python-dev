<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.3.7: http://docutils.sourceforge.net/" />
<title>FIT For Developing Software</title>
<link rel="stylesheet" href="default.css" type="text/css" />
</head>
<body>
<div class="document" id="fit-for-developing-software">
<h1 class="title">FIT For Developing Software</h1>
<p>by Rick Mugridge and Ward Cunningham
Prentice-Hall, June 2005</p>
<p>Fit For Developing Software - the Framework for Integrated Tests is the new book on the FIT framework. While it's quite well written, it deals only with the Java version of FIT, and the chapter on FitNesse is already out of date.</p>
<p>This section provides side notes to the book on differences with PyFit. Notes are going to be organized by chapter and sometimes page number, sometimes with references into the main documentation; other parts of the PyFit documentation are organized by function.</p>
<p>This document is not intended to be a tutorial on using Python Fit. That's the function of the main documentation.</p>
<div class="contents topic" id="contents">
<p class="topic-title first"><a name="contents">Contents</a></p>
<ul class="simple">
<li><a class="reference" href="#part-i-introducing-fit-tables" id="id14" name="id14">Part I. Introducing Fit Tables</a><ul>
<li><a class="reference" href="#chapter-3-figure-3-1-general-notes" id="id15" name="id15">Chapter 3, Figure 3.1 General Notes</a></li>
<li><a class="reference" href="#chapter-3-3-questions-and-answers" id="id16" name="id16">Chapter 3.3, Questions and Answers</a></li>
<li><a class="reference" href="#chapter-4-3-questions-and-answers-p28" id="id17" name="id17">Chapter 4.3, Questions and Answers, p28.</a></li>
<li><a class="reference" href="#chapter-5-testing-lists" id="id18" name="id18">Chapter 5. Testing Lists</a></li>
<li><a class="reference" href="#chapter-6-2-tip-about-setup-tables" id="id19" name="id19">Chapter 6.2, Tip about setup tables.</a></li>
<li><a class="reference" href="#chapter-6-3-questions-and-answers-p46" id="id20" name="id20">Chapter 6.3, Questions and Answers, p46.</a></li>
<li><a class="reference" href="#chapter-7-running-fit" id="id21" name="id21">Chapter 7. Running FIT.</a></li>
<li><a class="reference" href="#chapter-8-fitnesse" id="id22" name="id22">Chapter 8. FitNesse.</a></li>
<li><a class="reference" href="#chapter-9-expecting-errors" id="id23" name="id23">Chapter 9. Expecting Errors.</a></li>
<li><a class="reference" href="#chapter-10-fitlibrary" id="id24" name="id24">Chapter 10. FitLibrary</a></li>
<li><a class="reference" href="#chapter-11-a-variety-of-tables" id="id25" name="id25">Chapter 11. A variety of Tables.</a></li>
</ul>
</li>
<li><a class="reference" href="#part-iii-introducing-fit-fixtures" id="id26" name="id26">Part III - Introducing Fit Fixtures.</a><ul>
<li><a class="reference" href="#chapter-21-1-column-fixtures-questions-and-answers-p181ff" id="id27" name="id27">Chapter 21.1 Column Fixtures. Questions and Answers, p181ff</a></li>
<li><a class="reference" href="#chaper-21-1-note-on-camelcasing" id="id28" name="id28">Chaper 21.1 Note on CamelCasing</a></li>
<li><a class="reference" href="#chapter-21-4-columnfixture-in-general" id="id29" name="id29">Chapter 21.4 ColumnFixture in General</a></li>
<li><a class="reference" href="#chapter-22-actionfixture" id="id30" name="id30">Chapter 22. ActionFixture.</a></li>
<li><a class="reference" href="#chapter-23-list-fixtures" id="id31" name="id31">Chapter 23. List Fixtures.</a></li>
<li><a class="reference" href="#chapter-24-fixtures-for-sequences-of-tables" id="id32" name="id32">Chapter 24. Fixtures for Sequences of Tables.</a></li>
<li><a class="reference" href="#chapter-25-using-other-values-in-tables" id="id33" name="id33">Chapter 25. Using Other Values in Tables.</a></li>
<li><a class="reference" href="#chapter-26-installing-and-running-fit" id="id34" name="id34">Chapter 26. Installing and Running FIT.</a></li>
<li><a class="reference" href="#chapter-28-fitlibrary-fixtures" id="id35" name="id35">Chapter 28. FitLibrary Fixtures.</a></li>
<li><a class="reference" href="#chapter-29-custom-table-fixtures" id="id36" name="id36">Chapter 29. Custom Table Fixtures.</a></li>
</ul>
</li>
<li><a class="reference" href="#part-iv-developing-fixtures-for-rent-a-party-software" id="id37" name="id37">Part IV - Developing Fixtures for Rent-A-Party Software</a><ul>
<li><a class="reference" href="#chapter-32-testing-fixtures-through-the-user-interface" id="id38" name="id38">Chapter 32. Testing Fixtures through the user interface</a></li>
<li><a class="reference" href="#chapter-33-restructuring-the-application-for-testing" id="id39" name="id39">Chapter 33. Restructuring the Application for testing.</a></li>
<li><a class="reference" href="#chapter-35-running-calculation-tests-indirectly" id="id40" name="id40">Chapter 35. Running Calculation Tests Indirectly</a></li>
</ul>
</li>
<li><a class="reference" href="#part-v-custom-development" id="id41" name="id41">Part V - Custom Development</a></li>
</ul>
</div>
<div class="section" id="part-i-introducing-fit-tables">
<h1><a class="toc-backref" href="#id14" name="part-i-introducing-fit-tables">Part I. Introducing Fit Tables</a></h1>
<div class="section" id="chapter-3-figure-3-1-general-notes">
<h2><a class="toc-backref" href="#id15" name="chapter-3-figure-3-1-general-notes">Chapter 3, Figure 3.1 General Notes</a></h2>
<p>You'll notice that several cells are italicized. This is emphasis for the reader, it means nothing to FIT and does not usually affect the test in any way. This kind of markup can be used freely to provide emphasis and readability. You should stay away from background highlighting, however, since that can prevent you from seeing the results of tests.</p>
<p>There is one exception to being able to use emphasis freely, however. Certain kinds of values interpret HTML markup and may be confused by the presence of emphasis markup they are not expecting. These will be pretty obvious.</p>
<p>The parenthesis after the names for the calculated columns is an idiom that's specific to ColumnFixture type fixtures. There is a good deal of discussion about markup in the FIT developer community, and Python FIT allows you to use a style either with or without markup. See the <a class="reference" href="FIT_ColumnFixture.htm">ColumnFixture</a> and <a class="reference" href="FIT_RowFixture.htm">RowFixture</a> writeups for details.</p>
<p>This kind of markup is not needed for other kinds of fixtures, and Python Fit does not allow it.</p>
</div>
<div class="section" id="chapter-3-3-questions-and-answers">
<h2><a class="toc-backref" href="#id16" name="chapter-3-3-questions-and-answers">Chapter 3.3, Questions and Answers</a></h2>
<p>PyFit differs from other versions in how it treats true and false values. You can use t, true, y, yes, 1 and + for true values, and f, false, n, no, 0 and - for false values, in either upper or lower case. Any other value is an error. The use of all values other than the true values for false, as well as 0 and 1 are programmer idioms that unfortunately crept into the user interface.</p>
<p>Your developer can also specify other values for either true or false when he writes the fixtures. This can be useful if the FIT tests are written in some language other than English, but it does not change the values displayed on an error.</p>
</div>
<div class="section" id="chapter-4-3-questions-and-answers-p28">
<h2><a class="toc-backref" href="#id17" name="chapter-4-3-questions-and-answers-p28">Chapter 4.3, Questions and Answers, p28.</a></h2>
<p>Comments in tables is an interesting question. In general, you can put comments before or after tables, using any markup that your word processor will accept for an HTML document. Calculate, Column and Row fixtures have a convention that allows comment columns; ActionFixture allows additional cells on the end of each row. DoFixture has a note special action. Whether other fixtures allow embedded columns is specific to the fixture. Consult your developers, who can accomodate you.</p>
</div>
<div class="section" id="chapter-5-testing-lists">
<h2><a class="toc-backref" href="#id18" name="chapter-5-testing-lists">Chapter 5. Testing Lists</a></h2>
<p>It's probably useful at this point to emphasise that the term list, as used in this chapter, is not restricted to a sequentially ordered sequence of items. It refers to any collection of items, organized however the application finds most useful. The PyFit documentation uses the term collection throughout for the same concept.</p>
<p>The footnote on p.31 mentions that RowFixture type fixtures usually do not use the parenthesis notation. In fact, you cannot use this notation in Python Fit, it is restricted to ColumnFixture type fixtures.</p>
</div>
<div class="section" id="chapter-6-2-tip-about-setup-tables">
<h2><a class="toc-backref" href="#id19" name="chapter-6-2-tip-about-setup-tables">Chapter 6.2, Tip about setup tables.</a></h2>
<p>It's technically unnecessary to include a final calculate type column for a table that's used to set up values. ColumnFixture derived tables can use the execute() method instead. This method is called before the first calculate column of each row, or at the end of the row if there are no calculate columns. This is not a Python Fit special feature: it is a standard feature of all Fit implementations.</p>
<p>In release 0.8a2 and following, it's also possible to use the special endOfRow() method for the same effect.</p>
<p>The downside of using either the execute() method or the endOfRow() method is that there is no obvious place to post errors: they go into either the first or last cell on the row.</p>
</div>
<div class="section" id="chapter-6-3-questions-and-answers-p46">
<h2><a class="toc-backref" href="#id20" name="chapter-6-3-questions-and-answers-p46">Chapter 6.3, Questions and Answers, p46.</a></h2>
<p>If you leave the first cell in a column blank for a given value column, many Python Fit fixtures will throw an exception (that is, a cell colored yellow.) Whether there is a default value depends on how the developer coded the fixture. Don't do this.</p>
<p>Special values like blank, and as we will see later, error and null, create interesting gotchas. They mean that you can't enter the literal words blank, error or null, even if you want to. If you need to do this, either the developer who works on the fixture needs to deal with the issue, or you can use a Python Fit special feature called the asis cell handler. The asis cell handler needs to be enabled by the developer who writes the fixture. See the documentation page on <a class="reference" href="FIT_CellHandlers.htm">cell handlers</a> for details of how to use this. You can also have the fixture writer disable special handling of blank and null, although there is currently nothing you can do about the error keyword.</p>
</div>
<div class="section" id="chapter-7-running-fit">
<h2><a class="toc-backref" href="#id21" name="chapter-7-running-fit">Chapter 7. Running FIT.</a></h2>
<p>The current version of PyFit does not support using spreadsheets directly. Whether they will work if saved as HTML is not something I've tested. Support may be in a future release.</p>
<p>I also have not tested Mozilla, FrontPage or Dreamweaver, although I know of no reason why they should not work. Microsoft Word files, saved as HTML, definitely do work. So does any editor that creates correct HTML directly.</p>
<p>The batch <a class="reference" href="FIT_Runners.htm">runner</a> in PyFit is quite different from the Java version; your developer should review the documentation.</p>
</div>
<div class="section" id="chapter-8-fitnesse">
<h2><a class="toc-backref" href="#id22" name="chapter-8-fitnesse">Chapter 8. FitNesse.</a></h2>
<p>The current version of FitNesse is somewhat different from the version documented in the book. Given publication schedules, this is as inevitable as it is unfortunate; see the www.fitnesse.org site for current details.</p>
<p>The same version of Python FIT runs under both FitNesse and batch; in most cases it mixes features from both environments with wild abandon. Future releases will try to clarify this situation.</p>
</div>
<div class="section" id="chapter-9-expecting-errors">
<h2><a class="toc-backref" href="#id23" name="chapter-9-expecting-errors">Chapter 9. Expecting Errors.</a></h2>
<p>PyFit fully supports the error keyword as described. It also supports two cell handlers that give you more detailed control over errors; see the exception and fail <a class="reference" href="FIT_CellHandlers.htm">cell handler</a> writeups for details.</p>
</div>
<div class="section" id="chapter-10-fitlibrary">
<h2><a class="toc-backref" href="#id24" name="chapter-10-fitlibrary">Chapter 10. FitLibrary</a></h2>
<p>PyFit contains most of FitLibrary. Exclusions are as noted.</p>
</div>
<div class="section" id="chapter-11-a-variety-of-tables">
<h2><a class="toc-backref" href="#id25" name="chapter-11-a-variety-of-tables">Chapter 11. A variety of Tables.</a></h2>
<p>DotGraphics, the package used to produce the second picture, is not officially supported, although there is prototype code in this release. This release also does not do well on making graphics that work in the input HTML work properly in the result HTML. The table fixture is supported, and there is a quite interesting acceptance test you might like to examine to see some of the possibilities.</p>
</div>
</div>
<div class="section" id="part-iii-introducing-fit-fixtures">
<h1><a class="toc-backref" href="#id26" name="part-iii-introducing-fit-fixtures">Part III - Introducing Fit Fixtures.</a></h1>
<div class="section" id="chapter-21-1-column-fixtures-questions-and-answers-p181ff">
<h2><a class="toc-backref" href="#id27" name="chapter-21-1-column-fixtures-questions-and-answers-p181ff">Chapter 21.1 Column Fixtures. Questions and Answers, p181ff</a></h2>
<p>Fixtures derived from ColumnFixture need some way to distinguish between given and calculated columns. Most versions of Fit use parenthesis for this purpose. PyFit and FitNesse versions also allow a ? or ! following the name. PyFit does not use the parenthesis or question mark to indicate that the fixture implements the column using a method; either given or calculated columns can use fields, methods or properties, as appropriate.</p>
<p>Python FIT's version of ColumnFixture has a substantial number of enhancements, including eight column types, the ability to dispense with markup and a diagnostic mode that will tell you the column type and the translated value of a label.</p>
<p>PyFit handles floating point comparisons sanely. The precision is set by the actual value in the cell. For example, 3.14 will compare equal to any value between 3.135 and 3.145 (with the usual fuzz on the boundaries.) 3.14159 will compare equal to any value between 3.141585 and 3.141595.</p>
<p>The boundary can be widened or narrowed by a special entry in the metadata for the column. PyFit also supports the range notation from FitNesse, and the numeric range cell handler.</p>
</div>
<div class="section" id="chaper-21-1-note-on-camelcasing">
<h2><a class="toc-backref" href="#id28" name="chaper-21-1-note-on-camelcasing">Chaper 21.1 Note on CamelCasing</a></h2>
<p>Batch and FitNesse have slightly different rules for how they convert the header of a table to an identifier that can be used in a Python program. The exact rules are specific to each programming language. Frankly, I should have used one set of rules for both batch and FitNesse, but I didn't figure that out until too late.</p>
<p>Whether a fixture uses camelCase or extendedCamelCase depends on the fixture. Most (but not all) fixtures that are part of the FitLibrary use extended camel case.</p>
<p>There is a feature, the <a class="reference" href="FIT_ConfigurationExit.htm">Application Configuration</a> module, which can force all fixtures to use a single consistent camel routine. This feature also provides some support for writing tests in a language other than English.</p>
</div>
<div class="section" id="chapter-21-4-columnfixture-in-general">
<h2><a class="toc-backref" href="#id29" name="chapter-21-4-columnfixture-in-general">Chapter 21.4 ColumnFixture in General</a></h2>
<p>PyFit processes column fixtures somewhat differently due to two factors. One is that it supports the symbol store and retrieve mechanism from FitNesse, and the second is that it supports fields, methods and properties for both given and calculated columns.</p>
<p>See the columnFixture documentation for the store and retrieve markup, and the TypeAdapter documentation (which will be discussed further as notes to Chapter 25) for additional information. In general, it means that errors may be reported in different places from the Java version.</p>
<p>We should also note that ColumnFixture itself calls an overridable method before processing the first cell of a row (reset()), and before processing the first calculation cell of a row (execute()). Prior to release 0.8a2 it did not call an overridable method before or after the table, or after the row. In 0.8a2 and later releases it does call overridable methods in these situations. See the ColumnFixture documentation for details.</p>
</div>
<div class="section" id="chapter-22-actionfixture">
<h2><a class="toc-backref" href="#id30" name="chapter-22-actionfixture">Chapter 22. ActionFixture.</a></h2>
<p>While the actor (that is, the class instantiated by the start command) currently has to be a subclass of fit.Fixture, it may not have to in future releases. PyFit uses an entirely different mechanism for parsing user-defined values.</p>
</div>
<div class="section" id="chapter-23-list-fixtures">
<h2><a class="toc-backref" href="#id31" name="chapter-23-list-fixtures">Chapter 23. List Fixtures.</a></h2>
<p>The latest version of PyFit provides substantially improved collection testing fixtures. In particular, it is no longer necessary to subclass ArrayFixture, RowFixture, SetFixture or SubsetFixture, provided that previous fixtures do the necessary setup. See the writeups for <a class="reference" href="FitLib_ArrayFixture.htm">ArrayFixture</a> and <a class="reference" href="FIT_RowFixture.htm">RowFixture</a> for details.</p>
<p>In general, you should read the PyFit documentation rather than depending on the Fit book for details of these fixtures.</p>
</div>
<div class="section" id="chapter-24-fixtures-for-sequences-of-tables">
<h2><a class="toc-backref" href="#id32" name="chapter-24-fixtures-for-sequences-of-tables">Chapter 24. Fixtures for Sequences of Tables.</a></h2>
<p>This chapter recommends passing values between fixtures using static variables. The equivalent Python idiom is to use a variable at the module level, although it is quite reasonable to use a variable in a handy class object.</p>
<p>However, I recommend using the symbol table to pass values between fixtures. The reason is that the test level symbol table is reset for each new test, while module and class level variables are not, leading to subtle problems with data leaking from one test to another.</p>
<p>Of course, there are times when you want this behavior (such as retaining a single data base connection for a suite of tests) but usually you don't. When you do, there is a higher level symbol table which can be used. This level, the run level, also contains parameters from the runner command  line.</p>
</div>
<div class="section" id="chapter-25-using-other-values-in-tables">
<h2><a class="toc-backref" href="#id33" name="chapter-25-using-other-values-in-tables">Chapter 25. Using Other Values in Tables.</a></h2>
<p>PyFit has a completely different approach to <a class="reference" href="FIT_TypeAdapters.htm">type adapters</a> than the one outlined in this chapter. In particular, since Python cannot report the types of identifiers, methods or properties by reflection, the fixture writer must supply them in a metadata dictionary. Also, PyFit does not support the parse exit in the fixtures; this functionality requires user type adapters. See the type adapter writeup for details.</p>
</div>
<div class="section" id="chapter-26-installing-and-running-fit">
<h2><a class="toc-backref" href="#id34" name="chapter-26-installing-and-running-fit">Chapter 26. Installing and Running FIT.</a></h2>
<p>The previous versions of Python Fit resides in the data library of the Yahoo FitNesse and ExtremeProgramming mailing lists. This version and subsequent versions reside at the Python Cheese Shop. Accessing either of the mailing list data libraries requires joining one of these mailing lists.</p>
<p>See the PyFit documentation on the <a class="reference" href="FIT_Runners.htm">runners</a>. They are considerably different from the ones described in this chapter.</p>
</div>
<div class="section" id="chapter-28-fitlibrary-fixtures">
<h2><a class="toc-backref" href="#id35" name="chapter-28-fitlibrary-fixtures">Chapter 28. FitLibrary Fixtures.</a></h2>
<p>There are a number of differences in these fixtures, mostly due to the necessity of supplying metadata for the type adapter mechanisms.</p>
</div>
<div class="section" id="chapter-29-custom-table-fixtures">
<h2><a class="toc-backref" href="#id36" name="chapter-29-custom-table-fixtures">Chapter 29. Custom Table Fixtures.</a></h2>
<p>The second example in this chapter uses Dot Graphics, which only has a prototype implementation that has several serious known problems. The Image Fixture also has problems with accessing the same images from both the source and result HTML. These should be fixed in release 0.9</p>
</div>
</div>
<div class="section" id="part-iv-developing-fixtures-for-rent-a-party-software">
<h1><a class="toc-backref" href="#id37" name="part-iv-developing-fixtures-for-rent-a-party-software">Part IV - Developing Fixtures for Rent-A-Party Software</a></h1>
<p>There are a number of practical issues in this section.</p>
<div class="section" id="chapter-32-testing-fixtures-through-the-user-interface">
<h2><a class="toc-backref" href="#id38" name="chapter-32-testing-fixtures-through-the-user-interface">Chapter 32. Testing Fixtures through the user interface</a></h2>
<p>This chapter discusses integration testing, although not under that name. I've written some <a class="reference" href="FIT_ArchitecturalMotifs.htm">additional material</a> on this issue. You may find it interesting, although I'm not at all happy with its present form.</p>
</div>
<div class="section" id="chapter-33-restructuring-the-application-for-testing">
<h2><a class="toc-backref" href="#id39" name="chapter-33-restructuring-the-application-for-testing">Chapter 33. Restructuring the Application for testing.</a></h2>
<p>One issue in structuring an application for testing has been glossed over. The more the application can be structured with value objects that can be used in the type adapter mechanism (in preference to the supplied type adapters) the better the test experiance will be.</p>
<p>Ward Cunningham discusses this issue in depth in his <a class="reference" href="http://www.c2.com">Checks pattern language</a> paper.</p>
<p>Alistair Cockburn gives an excellent critique of the standard layered architecture and an alternative in his <a class="reference" href="http://alistair.cockburn.us/crystal/articles/hpaaa/hexagonalportsandadaptersarchitecture.htm">Ports and Adapters (Hexagonal) Architecture</a> paper.</p>
</div>
<div class="section" id="chapter-35-running-calculation-tests-indirectly">
<h2><a class="toc-backref" href="#id40" name="chapter-35-running-calculation-tests-indirectly">Chapter 35. Running Calculation Tests Indirectly</a></h2>
<p>This continues the theme from chapter 32, and the same paper is applicable.</p>
</div>
</div>
<div class="section" id="part-v-custom-development">
<h1><a class="toc-backref" href="#id41" name="part-v-custom-development">Part V - Custom Development</a></h1>
<p>PyFit has not changed the basic architecture, but there are lots of detail changes from what is presented in the book. A lot of functionality has been refactored into different modules. For example, the check routine has been moved from Fixture to TypeAdapter, and the annotation routines have been moved to Parse. What is left in Fixture is proxy routines for compatability.</p>
<p>The diagram of a parse tree should be studied closely, otherwise it will be more valuable to use the documentation supplied with PyFit.</p>
<p>There are numerous fixtures and type adapters supplied with the different examples and acceptance test suites; studying these in conjunction with the documentation will be quite helpful.</p>
</div>
</div>
</body>
</html>
