<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.3.7: http://docutils.sourceforge.net/" />
<title>CalculateFixture</title>
<link rel="stylesheet" href="default.css" type="text/css" />
</head>
<body>
<div class="document" id="calculatefixture">
<h1 class="title">CalculateFixture</h1>
<div class="contents topic" id="contents">
<p class="topic-title first"><a name="contents">Contents</a></p>
<ul class="simple">
<li><a class="reference" href="#repeat-and-exception-strings" id="id2" name="id2">Repeat and Exception Strings</a></li>
<li><a class="reference" href="#usage-in-classic-fit" id="id3" name="id3">Usage in Classic FIT</a></li>
<li><a class="reference" href="#usage-in-dofixture" id="id4" name="id4">Usage in DoFixture</a></li>
<li><a class="reference" href="#differences-with-columnfixture" id="id5" name="id5">Differences with ColumnFixture</a></li>
</ul>
</div>
<p>The CalculateFixture is part of the Fit Library. The parameters (givens) for the calculations are on the left, and the expected results are on the right, separated by a blank column.</p>
<p>CalculateFixture locates the first result column by finding the first column with a label that follows a column that has no label. What this means in practice is that you can leave the label cells blank for all of the given columns.</p>
<p>All columns with labels immediately following the first result column are also result columns. A column with no label ends the block of result columns: that column and anything to the right are comments. The ability to put comments in a CalcualateFixture is a new facility in Python FIT release 0.8</p>
<p>The effective label for a result column is created by combining all of the labels from the given (parameter) columns with the label on the result column. That is then <a class="reference" href="FIT_LabelToIdentifierMapping.htm">transformed</a> into the Python identifier of the method using the selected mechanism. Extended Camel Case is the default for this fixture, as it is for all fixtures in the FIT Library.</p>
<p>The parameter columns do not store data into the fixture instance; this is why the column headers can be left blank if desired. Instead, each of the calculate methods takes all of the values on that row as parameters, in the order specified.</p>
<div class="section" id="repeat-and-exception-strings">
<h1><a class="toc-backref" href="#id2" name="repeat-and-exception-strings">Repeat and Exception Strings</a></h1>
<p>CalculateFixture allows you to supply special strings that represent a repeated value in a given column and an expected exception in a calculated result column. The default for these facilities is None: that is, an empty cell represents a zero length string, not the value from the prior row, and an exception will be handled as an exception; it won't be intercepted.</p>
<p>These have to be supplied either by the fixture subclass or by the DoFixture method after it instantiates CalculateFixture; there is no way to specify them in the table.</p>
<p>The methods are:</p>
<div class="line-block">
<div class="line">setRepeatString(string)</div>
<div class="line">setExceptionString(string)</div>
</div>
<p>They set instance variables self.repeatString and self.exceptionString respectively.</p>
</div>
<div class="section" id="usage-in-classic-fit">
<h1><a class="toc-backref" href="#id3" name="usage-in-classic-fit">Usage in Classic FIT</a></h1>
<p>CalculateFixture must be subclassed to be used in classic FIT. There is currently no facility to supply either a SUT (Software Under Test) module or the necessary metadata.</p>
</div>
<div class="section" id="usage-in-dofixture">
<h1><a class="toc-backref" href="#id4" name="usage-in-dofixture">Usage in DoFixture</a></h1>
<p>A DoFixture method may instantiate CalculateFixture directly, passing it a SUT and a metadata dictionary, and then return the instantiated fixture to process the remainder of the current table. It can also set a repeat or exception string by either calling the appropriate method on the instance, or it can set the instance attribute directly.</p>
<p>It is also possible, of course, to write a subclass and invoke it directly.</p>
</div>
<div class="section" id="differences-with-columnfixture">
<h1><a class="toc-backref" href="#id5" name="differences-with-columnfixture">Differences with ColumnFixture</a></h1>
<p>While columnFixture and CalculateFixture serve somewhat the same function, they take two very different approaches.</p>
<p>ColumnFixture takes a spreadsheet approach: each value is processed in order. While there is an expectation that values on the left represent inputs to the computation, and values on the right represent results of the computation, nothing enforces this view. It's perfectly legitimate, and occasionally useful, to write a ColumnFixture subclass that stores a couple of values, does a calculation, stores another value, does another calculation and so forth.</p>
<p>Calculated results use the values that have been stored. They don't need to use all of them, though.</p>
<p>Since it's possible to have ColumnFixture subclasses where some of the calculated results do not need all of the stored values, several tables can use the same fixture with different columns in different orders. There are examples of this in the FIT Specification Tests.</p>
<p>CalculateFixture, on the other hand, does not store values at all. The method invoked by a result column takes all of the values on the left hand side as parameters. If there is more than one result column, each of the methods takes exactly the same parameters, in the same order.</p>
<p>CalculateFixture also takes a different approach to topics such as repeating values, blank cells and exceptions.</p>
</div>
</div>
</body>
</html>
