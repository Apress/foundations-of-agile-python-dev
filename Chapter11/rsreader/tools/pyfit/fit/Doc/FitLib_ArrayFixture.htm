<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="generator" content="Docutils 0.3.7: http://docutils.sourceforge.net/" />
<title>ArrayFixture, SetFixture and SubsetFixture</title>
<link rel="stylesheet" href="default.css" type="text/css" />
</head>
<body>
<div class="document" id="arrayfixture-setfixture-and-subsetfixture">
<h1 class="title">ArrayFixture, SetFixture and SubsetFixture</h1>
<p>These are three of four fixtures that can be used to check whether the contents of a collection are as expected. The other one is RowFixture, from the basic FIT package.</p>
<div class="contents topic" id="contents">
<p class="topic-title first"><a name="contents">Contents</a></p>
<ul class="simple">
<li><a class="reference" href="#environment-specific-usage" id="id2" name="id2">Environment-specific usage</a><ul>
<li><a class="reference" href="#using-an-arrayfixture-setfixture-or-subsetfixture-subclass-with-classic-fit" id="id3" name="id3">Using an ArrayFixture, SetFixture or SubsetFixture subclass with classic FIT</a></li>
<li><a class="reference" href="#using-arrayfixture-setfixture-or-subsetfixture-directly-with-classic-fit" id="id4" name="id4">Using ArrayFixture, SetFixture or SubsetFixture directly with classic FIT</a></li>
<li><a class="reference" href="#using-arrayfixture-setfixture-or-subsetfixture-from-a-fit-library-dofixture" id="id5" name="id5">Using ArrayFixture, SetFixture or SubsetFixture from a FIT Library DoFixture</a></li>
</ul>
</li>
<li><a class="reference" href="#general-usage-in-all-environments" id="id6" name="id6">General Usage in all environments</a></li>
</ul>
</div>
<div class="section" id="environment-specific-usage">
<h1><a class="toc-backref" href="#id2" name="environment-specific-usage">Environment-specific usage</a></h1>
<div class="section" id="using-an-arrayfixture-setfixture-or-subsetfixture-subclass-with-classic-fit">
<h2><a class="toc-backref" href="#id3" name="using-an-arrayfixture-setfixture-or-subsetfixture-subclass-with-classic-fit">Using an ArrayFixture, SetFixture or SubsetFixture subclass with classic FIT</a></h2>
<p>The first cell in the first row is the name of a RowFixture subclass.</p>
<p>Cells following the fixture name can contain parameters to your subclass. You can use the inherited getArgs() method or process the first row specially in doTable().</p>
<p>Your subclass must implement both the query() method and the getTargetClass() method. The query() method returns the contents of the collection. The getTargetClass() method returns a class object which contains the metadata dictionary bound to the _typeDict attribute.</p>
</div>
<div class="section" id="using-arrayfixture-setfixture-or-subsetfixture-directly-with-classic-fit">
<h2><a class="toc-backref" href="#id4" name="using-arrayfixture-setfixture-or-subsetfixture-directly-with-classic-fit">Using ArrayFixture, SetFixture or SubsetFixture directly with classic FIT</a></h2>
<p>To use one of these fixtures directly in classic FIT, a previous fixture must have stored an object with attributes named collection and metaData in the symbol table using self.setSymbol(key, value). The object containing the elements of the collection must be bound to the collection attribute, and the dictionary containing the metadata entries needed by the table must be bound to the metaData attribute. The object may be of any class which has the two required instance attributes. PyFit does not supply a class for this purpose.</p>
<p>The name of the symbol must be in the second cell of the first row of the table, immediately following the cell containing fitLib.someFixture which invokes the fixture. This behavior will not be inherited by subclasses; it is only availible if these fixtures are invoked directly.</p>
</div>
<div class="section" id="using-arrayfixture-setfixture-or-subsetfixture-from-a-fit-library-dofixture">
<h2><a class="toc-backref" href="#id5" name="using-arrayfixture-setfixture-or-subsetfixture-from-a-fit-library-dofixture">Using ArrayFixture, SetFixture or SubsetFixture from a FIT Library DoFixture</a></h2>
<p>There are two ways of using these fixtures in a Fit Library DoFixture or SequenceFixture. The easiest way is to do it the same way as in classic FIT: the first row of the table contains two cells, the first of which invokes the fixture while the second one contains the name of the symbol with the object specifying the collection and meta data.</p>
<p>The recommended way is to create a domain specific method that internally invokes the fixture. This must be the first row of the table; the remainder of the table is the same as other usages of these fixtures.</p>
<p>The invoking method must return a tuple of two items: the first is the collection, and the second is a dictionary containing the metadata describing the attributes of the elements.</p>
<p>The metadata entry for the command must specify $Array, $Set or $Subset as the returned value type.</p>
</div>
</div>
<div class="section" id="general-usage-in-all-environments">
<h1><a class="toc-backref" href="#id6" name="general-usage-in-all-environments">General Usage in all environments</a></h1>
<p>The collection can be a dictionary or any object that implements either the sequence or iterator protocol other than a string. Most of the time it will be a Python list, although it's possible to use application collection objects directly as long as they behave like either sequences or iterators. If it's a dictionary, the values will be used as the collection; the keys will be ignored except for ArrayFixture, where they will be used to sort the values into order.</p>
<p>Each member of the resulting sequence is an object whose attributes represent one row to be matched. Objects may be of mixed types and may be dictionaries.</p>
<p>The second row contains the names of the columns. Each name corresponds to a field, method or property in the data objects in the collection, or to a key if the data object is a dictionary. Methods are distinguished from fields and properties by reflection; the decorators ( (), ! and ? )used in ColumnFixture are not needed, and are not accepted.</p>
<p>All attributes named in the table must have metadata in the metadata dictionary. See the <a class="reference" href="FIT_TypeAdapters.htm">Type Adapters</a> writeup for details.</p>
<p>This setup is flexible enough that one can use a file object which is open for 'rt' as the collection, and then use the __str__ attribute and all zero parameter methods of the string data type. Because of the underscores, the __str__ attribute must be the result of aliasing some other name with the RenameTo metadata qualifier.</p>
</div>
</div>
</body>
</html>
