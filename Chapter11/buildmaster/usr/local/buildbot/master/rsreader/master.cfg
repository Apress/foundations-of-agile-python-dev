# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("rsreader-linux", "Fo74gh18")]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 4484

####### CHANGESOURCES

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

from buildbot.scheduler import Nightly, Scheduler
c['schedulers'] = []
c['schedulers'].append(Scheduler(name="rsreader under python 2.5",
                                 branch=None,
                                 treeStableTimer=5,
                                 builderNames=["buildbot-full-py2.5"]))
c['schedulers'].append(Scheduler(name="rsreader under python 2.4",
                                 branch=None,
                                 treeStableTimer=5,
                                 builderNames=["buildbot-full-py2.4"]))
c['schedulers'].append(Scheduler(name="accecptance tests under python 2.5",
                                 branch=None,
                                 treeStableTimer=5,
                                 builderNames=["buildbot-acceptance-py2.5"]))
c['schedulers'].append(Nightly(name="rsreader under 2.5 nightly build",
                               builderNames=["buildbot-acceptance-py2.5"],
                               hour=(1), minute=(50,52,38)))

####### STEPS

import os
import re
from twisted.internet.utils import getProcessValue
from StringIO import StringIO

from buildbot.process import factory
from buildbot.process.buildstep import BuildStep, LogLineObserver
from buildbot.status.builder import SUCCESS, FAILURE
from buildbot.steps.shell import WithProperties
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.transfer import FileUpload

class SVNThatSetsRevisionProperty(SVN):

     checked_out_line = re.compile("^Checked out revision (\d+).")

     def createSummary(self, log):
        for line in StringIO(log.getText()).readlines():
           found = self.checked_out_line.search(line)
           if found:
               self.setProperty("revision", found.group(1))
        return SVN.createSummary(self, log)


def python_(version):
   return  "../python%s/bin/python" % version

def nosetests_(version):
   return "../python%s/bin/nosetests" % version

def site_bin_(version):
   return  "../python%s/site-bin" % version

def site_pkgs_(version):
    subst = {'v': version}
    path = "../python%(v)s/lib/python%(v)s/site-packages"   
    return path % subst


def borkedBuilder():
    f = factory.BuildFactory()
    f.addStep(ShellCommand, command=["/tmp/foob"])
    return f

def pythonBuilder(version):
    python = python_(version)
    nosetests = nosetests_(version)
    site_bin = site_bin_(version)
    site_pkgs = site_pkgs_(version)

    f = factory.BuildFactory()
    f.addStep(SVNThatSetsRevisionProperty,
       baseURL="svn://repos/rsreader/",
       defaultBranch="trunk",
       mode="clobber",
       timeout=3600)
    f.addStep(ShellCommand,
              command=["rm", "-rf", site_pkgs],
              description="removing old site-packages",
              descriptionDone="site-packages removed")
    f.addStep(ShellCommand,
              command=["mkdir", site_pkgs],
              description="creating new site-packages",
              descriptionDone="site-packages created")
    f.addStep(ShellCommand,
              command=["rm", "-rf", site_bin],
              description="removing old site-bin",
              description="site-bin removed")
    f.addStep(ShellCommand,
              command=["mkdir", site_bin],
              description="creating new site-bin",
              descriptionDone="site-bin created")
    f.addStep(ShellCommand,
              command=[python, "./setup.py", "setopt",
                         "--command", "easy_install",
                         "--option", "allow-hosts",
                         "--set-value", "None"],
              description="Setting allow-hosts to None",
              descriptionDone="Allow-hosts set to None")
    f.addStep(Compile, command=[python, "./setup.py", "build"])
    f.addStep(ShellCommand,
              command=[python, "./setup.py",  "install",
                       "--install-scripts", site_bin],
              description="Installing",
              descriptionDone="Installed")
    f.addStep(ShellCommand,
              command=[python, "./setup.py", "test"],
              description="Running unit tests",
              descriptionDone="Unit tests run")
#    f.addStep(ShellCommand,
#              command=[nosetests, "./src/test", "--with-coverage"],
#              description="Measuring code coverage",
#              descriptionDone="Code coverage measured")
    return f

def uploadDirectory(version):
    return "uploaded-py%s" % version

def reportsFile():
    return "reports.zip"

def reportsFileLocal(version):
    return os.path.join(uploadDirectory(version), reportsFile())

def makeUploadDirectory(version):
    uploads = uploadDirectory(version)
    if not os.path.exists(uploads):
       os.mkdir(uploads)

class MakeReportsPackage(ShellCommand):
    def start(self):
        self.setCommand(["zip",
           "-r",
           "reports-%s.zip" % self.getProperty("revision"),
           "acceptance/reports"])
        ShellCommand.start(self)

class InstallReports(BuildStep):
    
    base_url = "http://buildmaster.theblobshop.com:8010"
    index = "%(revision)s-py%(version)s"
    dest_path = "public_html/rsreader/%(index)s"
    report_path = "rsreader/%(index)s/acceptance/reports"
    report_path_local = os.path.join(report_path.split('/')) 
    report_url = "%s/%s" % (base_url, report_path)
    report_link = '<a href="%s">FIT reports</a>.' % report_url
     
    def __init__(self, version, **kw):
        self.version = version
        BuildStep.__init__(self, **kw)
        self.addFactoryArguments(version=version)

    def expansions(self):
        exp = {'revision': self.getProperty("revision"),
               'version': self.version}
        exp['index'] = self.index % exp
        return exp
        
    def start(self):
        self.step_status.setColor("yellow")
        self.step_status.setText("Installing FIT reports")
        zip_file = os.path.abspath(reportsFileLocal(self.version))
        dest = self.dest_path % self.expansions()
        print "=" * 40
        cmd_line = "/usr/bin/unzip -qq -o -d %s %s 2>&1" % (dest, zip_file) 
        f=open("/tmp/unzipped", "a")
        f.write("\n")
        f.write(os.getcwd() + "\n")
        f.write(cmd_line + "\n")
        f.close()
        print "Command is %s" % cmd_line
        #cmd = Popen(cmd_line, shell=True, stdout=PIPE)
        #cmd = Popen(cmd_line, shell=True, stdout=PIPE)
        #(returncode, output) = getProcessValue("/usr/bin/unzip", ("-qq", "-o", "-d", dest, zip_file)
        #cmd = Popen("/bin/ls > /tmp/lsout 2>&1", shell=True, close_fds=True)
        result = getProcessValue("/usr/bin/unzip", ("-qq", "-o", "-d", dest, zip_file))
        self.success()
        return

        #stdout = cmd.stdout.readlines()
        #print "OUTPUT IS:", stdout
#        if cmd.returncode == 0:
        #if returncode == 0:
#           os.unlink(zip_file)
#           self.success()
#       else:
#           self.failure()

    def success(self):
        self.step_status.setColor("green")
        self.step_status.setText([self.report_link % self.expansions()])
        self.finished(SUCCESS)

    def failure(self):
        self.step_status.setColor("red")
        self.step_status.setText(["Publish reports", "unzip failed"])
        self.finished(FAILURE)

    def interrupt(self, reason):
        self.step_status.setColor("red")
        self.step_status.setText(["Publish reports", reason])
        self.finished(FAILURE)

def pythonAcceptanceBuilder(version):
    f = pythonBuilder(version)
    base_url = "http://www.theblobshop.com"
    dest_path = "/var/www/htdocs/rsreader"
    report_path = "rsreader/%(revision)s/acceptance/reports"
    report_url = "%s/%s" % (base_url, report_path)
    done_msg = 'Acceptance results are available <a href="%s">here</a>.'
    makeUploadDirectory(version)
    f.addStep(ShellCommand,
              haltOnFailure=True,
              command=[python_(version), "./tools/bin/accept.py"],
              description="Running acceptance tests",
              descriptionDone="Acceptance tests complete")
    f.addStep(ShellCommand,
              haltOnFailure=True,
              command=[python_(version),
                   "./tools/bin/package_reports.py",
                   WithProperties("%(revision)s")],
              description="Packaging build reports",
              descriptionDone="Build reports packaged")
    f.addStep(FileUpload,
              haltOnFailure=True,
              slavesrc=reportsFile(),
              masterdest=reportsFileLocal(version))
    f.addStep(InstallReports, version=version)
    return f
 


b1 = {'name': "buildbot-full-py2.5",
      'slavename': "rsreader-linux",
      'builddir': "full-py2.5",
      'factory': borkedBuilder(),
      }
b2 = {'name': "buildbot-full-py2.4",
      'slavename': "rsreader-linux",
      'builddir': "full-py2.4",
      'factory': pythonBuilder('2.4'),
      }
b3 = {'name': "buildbot-acceptance-py2.5",
      'slavename': "rsreader-linux",
      'builddir': "acceptance-py2.5",
      'factory': pythonAcceptanceBuilder('2.5'),
      } 
c['builders'] = [b1, b2, b3]


####### STATUS TARGETS

c['status'] = []

from buildbot.status.html import WebStatus
c['status'].append(WebStatus(http_port=8010))

from buildbot.status.mail import MailNotifier
c['status'].append(MailNotifier(
    fromaddr="buildbot@phytoplankton.drinktomi.com",
    extraRecipients=["builds@drinktomi.com"],
    sendToInterestedUsers=False))

####### PROJECT IDENTITY

c['projectName'] = "RSReader"
c['projectURL'] = "http://www.theblobshop.com/rsreader"
c['buildbotURL'] = "http://buildmaster.theblobshop.com:8010/"
